"use client"

import type React from "react"

import { useEffect, useRef, useState } from "react"
import Image from "next/image"
import { cn } from "@/lib/utils"
import { motion, AnimatePresence, useSpring, useTransform } from "framer-motion"

// Sample data organized by months
const timelineData = [
  {
    month: "March 2025",
    images: [
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
    ],
  },
  {
    month: "February 2025",
    images: [
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
    ],
  },
  {
    month: "January 2025",
    images: [
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
    ],
  },
  {
    month: "December 2024",
    images: [
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
    ],
  },
  {
    month: "November 2024",
    images: [
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
    ],
  },
  {
    month: "October 2024",
    images: [
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
      "/placeholder.svg?height=300&width=300",
    ],
  },
]

export default function CarTimelineGallery() {
  const [activeMonth, setActiveMonth] = useState(timelineData[0].month)
  const [scrollProgress, setScrollProgress] = useState(0)
  const [isDragging, setIsDragging] = useState(false)
  const [isHovering, setIsHovering] = useState(false)
  const [showScrollbar, setShowScrollbar] = useState(false)
  const containerRef = useRef<HTMLDivElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const indicatorRef = useRef<HTMLDivElement>(null)
  const sectionRefs = useRef<Record<string, HTMLDivElement | null>>({})
  const scrollbarTimeout = useRef<NodeJS.Timeout | null>(null)

  // Framer Motion values for smooth animations
  const springConfig = { damping: 20, stiffness: 300 }
  const yProgress = useSpring(scrollProgress, springConfig)
  const scale = useSpring(1, springConfig)
  const opacity = useSpring(0, { damping: 25, stiffness: 200 })

  // Show scrollbar temporarily
  const showScrollbarTemporarily = () => {
    setShowScrollbar(true)
    opacity.set(1)

    if (scrollbarTimeout.current) {
      clearTimeout(scrollbarTimeout.current)
    }

    scrollbarTimeout.current = setTimeout(() => {
      if (!isDragging && !isHovering) {
        setShowScrollbar(false)
        opacity.set(0)
      }
    }, 2000)
  }

  // Scroll to position based on drag
  const scrollToPosition = (clientY: number) => {
    if (!scrollAreaRef.current || !containerRef.current) return

    const scrollArea = scrollAreaRef.current
    const scrollAreaRect = scrollArea.getBoundingClientRect()

    // Calculate position ratio (0 to 1)
    let positionRatio = (clientY - scrollAreaRect.top) / scrollAreaRect.height
    positionRatio = Math.max(0, Math.min(1, positionRatio))

    // Scroll to corresponding position
    const container = containerRef.current
    const scrollHeight = container.scrollHeight - container.clientHeight
    const targetScrollTop = scrollHeight * positionRatio

    container.scrollTo({
      top: targetScrollTop,
      behavior: "auto", // Use "auto" for dragging to feel responsive
    })
  }

  // Handle mouse down on indicator
  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault()
    setIsDragging(true)
    scale.set(0.95) // Slightly scale down when dragging
    scrollToPosition(e.clientY)
  }

  // Handle touch start on indicator
  const handleTouchStart = (e: React.TouchEvent) => {
    setIsDragging(true)
    scale.set(0.95) // Slightly scale down when dragging
    scrollToPosition(e.touches[0].clientY)
  }

  // Handle mouse move
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (isDragging) {
        scrollToPosition(e.clientY)
      }
      showScrollbarTemporarily()
    }

    const handleMouseUp = () => {
      if (isDragging) {
        setIsDragging(false)
        scale.set(isHovering ? 1.05 : 1) // Return to normal or hover scale
      }
    }

    const handleTouchMove = (e: TouchEvent) => {
      if (isDragging) {
        scrollToPosition(e.touches[0].clientY)
        e.preventDefault() // Prevent scrolling while dragging
      }
    }

    const handleTouchEnd = () => {
      if (isDragging) {
        setIsDragging(false)
        scale.set(1) // Return to normal scale
      }
    }

    window.addEventListener("mousemove", handleMouseMove)
    window.addEventListener("mouseup", handleMouseUp)
    window.addEventListener("touchmove", handleTouchMove, { passive: false })
    window.addEventListener("touchend", handleTouchEnd)

    return () => {
      window.removeEventListener("mousemove", handleMouseMove)
      window.removeEventListener("mouseup", handleMouseUp)
      window.removeEventListener("touchmove", handleTouchMove)
      window.removeEventListener("touchend", handleTouchEnd)
    }
  }, [isDragging, isHovering, scale])

  // Update active month and scroll progress based on scroll position
  useEffect(() => {
    const handleScroll = () => {
      if (!containerRef.current) return

      const container = containerRef.current
      const scrollPosition = container.scrollTop
      const scrollHeight = container.scrollHeight - container.clientHeight

      // Calculate scroll progress (0 to 1)
      const progress = Math.max(0, Math.min(1, scrollPosition / scrollHeight))
      setScrollProgress(progress)
      yProgress.set(progress)

      // Show scrollbar when scrolling
      if (!isDragging) {
        showScrollbarTemporarily()
      }

      // Find the current active section
      let currentMonth = activeMonth

      Object.entries(sectionRefs.current).forEach(([month, section]) => {
        if (!section) return

        const sectionTop = section.offsetTop - container.offsetTop

        // Check if section is the active one
        if (scrollPosition >= sectionTop - 50) {
          currentMonth = month
        }
      })

      if (currentMonth !== activeMonth) {
        setActiveMonth(currentMonth)
      }
    }

    const container = containerRef.current
    if (container) {
      container.addEventListener("scroll", handleScroll)
      // Initial check
      handleScroll()

      return () => container.removeEventListener("scroll", handleScroll)
    }
  }, [activeMonth, isDragging, yProgress])

  // Initial animation
  useEffect(() => {
    // Show scrollbar briefly on initial load
    showScrollbarTemporarily()
  }, [])

  const registerSection = (month: string, element: HTMLDivElement | null) => {
    sectionRefs.current[month] = element
  }

  return (
    <div className="relative w-full">
      {/* Main content area with car images */}
      <div
        ref={containerRef}
        className="w-full h-screen overflow-y-auto scroll-smooth pb-20"
        onMouseEnter={() => {
          setShowScrollbar(true)
          opacity.set(1)
        }}
        onMouseLeave={() => {
          if (!isDragging && !isHovering) {
            setShowScrollbar(false)
            opacity.set(0)
          }
        }}
      >
        {timelineData.map(({ month, images }) => (
          <div key={month} ref={(ref) => registerSection(month, ref)} id={`section-${month}`} className="mb-8">
            <h2 className="text-2xl font-bold my-4 px-4">{month}</h2>
            <div className="grid grid-cols-3 gap-1">
              {images.map((src, index) => (
                <div key={`${month}-${index}`} className="relative aspect-square overflow-hidden">
                  <Image
                    src={src || "/placeholder.svg"}
                    alt={`Car image ${index + 1} from ${month}`}
                    fill
                    className="object-cover"
                  />
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Draggable month indicator */}
      <motion.div
        ref={scrollAreaRef}
        className="fixed right-4 top-1/2 -translate-y-1/2 h-[60vh] flex items-center z-10"
        style={{ opacity }}
      >
        {/* Month indicator bubble */}
        <motion.div
          ref={indicatorRef}
          className={cn(
            "absolute right-0 bg-white rounded-full py-2 px-4 shadow-lg select-none",
            isDragging ? "cursor-grabbing" : "cursor-grab",
          )}
          style={{
            top: useTransform(yProgress, [0, 1], ["0%", "100%"]),
            y: "-50%",
            scale,
            boxShadow: useTransform(
              scale,
              [0.95, 1, 1.05],
              ["0 2px 4px rgba(0,0,0,0.1)", "0 4px 8px rgba(0,0,0,0.1)", "0 8px 16px rgba(0,0,0,0.15)"],
            ),
          }}
          onMouseDown={handleMouseDown}
          onTouchStart={handleTouchStart}
          onMouseEnter={() => {
            setIsHovering(true)
            if (!isDragging) scale.set(1.05)
          }}
          onMouseLeave={() => {
            setIsHovering(false)
            if (!isDragging) scale.set(1)
          }}
          whileTap={{ scale: 0.95 }}
        >
          <AnimatePresence mode="wait">
            <motion.span
              key={activeMonth}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ duration: 0.2 }}
              className="text-black font-medium whitespace-nowrap block"
            >
              {activeMonth.split(" ")[0]}
            </motion.span>
          </AnimatePresence>
        </motion.div>
      </motion.div>
    </div>
  )
}

